{"version":3,"sources":["../../../src/services/fleetDataService.js"],"names":["FleetDataService","cars","drones","errors","license","find","car","sort","car1","car2","fleet","data","type","validateCarData","loadCar","push","e","drone","loadDrone","c","model","latLong","make","miles","requiredProps","split","hasErrors","field","Number","isNaN","parseFloat","d","airTimeHours","base"],"mappings":"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","file":"fleetDataService.js","sourcesContent":["import {Car} from \"../classes/Car.js\";\r\nimport {Drone} from \"../classes/Drone.js\";\r\nimport {DataError} from \"./DataError.js\";\r\n\r\nexport class FleetDataService {\r\n\r\n    constructor() {\r\n        this.cars = [];\r\n        this.drones = [];\r\n        this.errors = [];\r\n    }\r\n\r\n    getCarByLicense(license){\r\n        return this.cars.find(function(car){\r\n            return car.license === license;\r\n        });\r\n    }\r\n\r\n    getCarsSortedByLicense(){\r\n        return this.cars.sort(function(car1,car2){\r\n            if(car1.license < car2.license){\r\n                return -1;\r\n            }\r\n            if(car1.license > car2.license){\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    loadData(fleet) {\r\n        for (let data of fleet) {\r\n            switch (data.type) {\r\n                case 'car':\r\n                    if (this.validateCarData(data)) {\r\n                        let car = this.loadCar(data);\r\n                        if (car) {\r\n                            this.cars.push(car);\r\n                        }\r\n                    } else {\r\n                        let e = new DataError('Car data is not valid', data);\r\n                        this.errors.push(e);\r\n                    }\r\n                    break;\r\n                case 'drone':\r\n                    let drone = this.loadDrone(data);\r\n                    this.drones.push(drone);\r\n                    break;\r\n                default:\r\n                    let e = new DataError('invalid vehicle type', data);\r\n                    this.errors.push(e);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    loadCar(car) {\r\n        try {\r\n            let c = new Car(car.license, car.model, car.latLong);\r\n            c.make = car.make;\r\n            c.miles = car.miles;\r\n            return c;\r\n        } catch (e) {\r\n            this.errors.push(new DataError('error loading car', e));\r\n        }\r\n        return null;\r\n    }\r\n\r\n    validateCarData(car) {\r\n        let requiredProps = 'license make model miles latLong'.split(' ');\r\n        let hasErrors = false;\r\n\r\n        for (let field of requiredProps) {\r\n            if (!car[field]) {\r\n                this.errors.push(new DataError(`invalid field of car: ${field}`, car));\r\n                hasErrors = true;\r\n            }\r\n        }\r\n        if (Number.isNaN(Number.parseFloat(car.miles))) {\r\n            this.errors.push(new DataError('miles is not a number', car));\r\n            hasErrors = true;\r\n        }\r\n\r\n        return !hasErrors;\r\n    }\r\n\r\n    loadDrone(drone) {\r\n        try {\r\n            let d = new Drone(drone.license, drone.model, drone.latLong);\r\n            d.airTimeHours = drone.airTimeHours;\r\n            d.base = drone.base;\r\n            return d;\r\n        } catch (e) {\r\n            this.errors.push(new DataError('error loading drones', e));\r\n        }\r\n        return null;\r\n    }\r\n}"]}