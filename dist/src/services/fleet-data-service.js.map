{"version":3,"sources":["../../../src/services/fleet-data-service.js"],"names":["FleetDataService","cars","drones","errors","license","find","car","sort","car1","car2","filter","make","indexOf","fleet","data","type","validateCarData","loadCar","push","e","c","model","latLong","miles","requiredProps","split","hasErrors","field","Number","isNaN","parseFloat"],"mappings":"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","file":"fleet-data-service.js","sourcesContent":["import {Car} from '../classes/car.js';\r\nimport {Drone} from '../classes/drone.js';\r\nimport {DataError} from './data-error.js';\r\n\r\nexport class FleetDataService {\r\n\r\n    constructor() {\r\n        this.cars = [];\r\n        this.drones = []; \r\n        this.errors = [];       \r\n    }    \r\n    \r\n    getCarByLicense(license) {\r\n        return this.cars.find(function(car) {\r\n            return car.license === license;\r\n        });\r\n    }\r\n    \r\n    getCarsSortedByLicense() {\r\n        return this.cars.sort(function(car1, car2) {\r\n            if (car1.license < car2.license)\r\n                return -1;\r\n            if (car1.license > car2.license)\r\n                return 1;\r\n            return 0;\r\n        });\r\n    }\r\n    \r\n    filterCarsByMake(filter) {\r\n        return this.cars.filter(car => car.make.indexOf(filter) >= 0);\r\n    }\r\n    \r\n    loadData(fleet) {\r\n        for (let data of fleet) {\r\n            switch(data.type) {\r\n                case 'car':\r\n                    if (this.validateCarData(data)) {\r\n                        let car = this.loadCar(data);\r\n                        if (car) \r\n                            this.cars.push(car);\r\n                    }\r\n                    else {\r\n                        let e = new DataError('invalid car data', data);\r\n                        this.errors.push(e);\r\n                    }\r\n                    break;\r\n                case 'drone':\r\n                    this.drones.push(data);\r\n                    break;\r\n                default:\r\n                    let e = new DataError('Invalid vehicle type', data);\r\n                    this.errors.push(e);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    loadCar(car) {\r\n        try {\r\n            let c = new Car(car.license, car.model, car.latLong);\r\n            c.miles = car.miles;\r\n            c.make = car.make;\r\n            return c;\r\n        } catch(e) {\r\n            this.errors.push(new DataError('error loading car', car));\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    validateCarData(car) {\r\n        let requiredProps = 'license model latLong miles make'.split(' ');\r\n        let hasErrors = false;\r\n        \r\n        for (let field of requiredProps) {\r\n            if (!car[field]) {\r\n                this.errors.push(new DataError(`invalid field ${field}`, car));\r\n                hasErrors = true;\r\n            }\r\n        }\r\n        if (Number.isNaN(Number.parseFloat(car.miles))) {\r\n            this.errors.push(new DataError('invalid milage', car));\r\n            hasErrors = true;\r\n        }\r\n        return !hasErrors;\r\n    }\r\n}"]}